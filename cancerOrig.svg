<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>genetic::detail::arity (1,181,818,170 samples, 0.27%)</title><rect x="69.0" y="341" width="3.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="71.97" y="351.5" ></text>
</g>
<g >
<title>node::Start (323,232,320 samples, 0.07%)</title><rect x="309.6" y="469" width="0.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="312.64" y="479.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::program const*, genetic::program*&gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="357" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="285.10" y="367.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="453" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="463.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="373" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="383.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.1" y="405" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.12" y="415.5" ></text>
</g>
<g >
<title>[unknown] (191,919,190 samples, 0.04%)</title><rect x="34.9" y="149" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="37.88" y="159.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="325" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="335.5" ></text>
</g>
<g >
<title>philox_random_uint32 (50,505,050 samples, 0.01%)</title><rect x="275.6" y="341" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="278.64" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_write (121,212,120 samples, 0.03%)</title><rect x="310.8" y="373" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="313.77" y="383.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (90,909,090 samples, 0.02%)</title><rect x="310.3" y="341" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="313.28" y="351.5" ></text>
</g>
<g >
<title>genetic::execute (87,232,322,360 samples, 20.21%)</title><rect x="35.5" y="373" width="238.5" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="38.52" y="383.5" >genetic::execute</text>
</g>
<g >
<title>[unknown] (404,040,400 samples, 0.09%)</title><rect x="11.4" y="453" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.38" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (606,060,600 samples, 0.14%)</title><rect x="33.8" y="341" width="1.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="36.75" y="351.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="277" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="20.10" y="287.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;genetic::program*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="405" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="285.10" y="415.5" ></text>
</g>
<g >
<title>node::SpinEventLoopInternal (323,232,320 samples, 0.07%)</title><rect x="309.6" y="421" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="312.64" y="431.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (50,505,050 samples, 0.01%)</title><rect x="282.1" y="277" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="285.13" y="287.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="319.5" ></text>
</g>
<g >
<title>[unknown] (90,909,090 samples, 0.02%)</title><rect x="35.2" y="37" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.16" y="47.5" ></text>
</g>
<g >
<title>philox_oneround (1,111,111,100 samples, 0.26%)</title><rect x="278.1" y="325" width="3.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="281.10" y="335.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="277" width="1.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="277.04" y="287.5" ></text>
</g>
<g >
<title>philox_next4 (70,707,070 samples, 0.02%)</title><rect x="281.9" y="357" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="284.88" y="367.5" ></text>
</g>
<g >
<title>__libc_start_call_main (323,232,320 samples, 0.07%)</title><rect x="309.6" y="485" width="0.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="312.64" y="495.5" ></text>
</g>
<g >
<title>__sinf_fma (797,979,790 samples, 0.18%)</title><rect x="66.1" y="341" width="2.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="69.09" y="351.5" ></text>
</g>
<g >
<title>genetic::subtree_mutation (222,222,220 samples, 0.05%)</title><rect x="275.6" y="405" width="0.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="278.64" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (141,414,140 samples, 0.03%)</title><rect x="15.6" y="341" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="18.58" y="351.5" ></text>
</g>
<g >
<title>uv__work_done (60,606,060 samples, 0.01%)</title><rect x="309.8" y="357" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="312.81" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="277" width="1.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="36.75" y="287.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (4,676,767,630 samples, 1.08%)</title><rect x="292.3" y="357" width="12.8" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="295.30" y="367.5" ></text>
</g>
<g >
<title>[unknown] (321,262,623,050 samples, 74.44%)</title><rect x="311.4" y="373" width="878.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.38" y="383.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (151,515,150 samples, 0.04%)</title><rect x="35.0" y="117" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.00" y="127.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.1" y="421" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.12" y="431.5" ></text>
</g>
<g >
<title>:1620 (111,111,110 samples, 0.03%)</title><rect x="13.0" y="501" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="15.96" y="511.5" ></text>
</g>
<g >
<title>[genetic_benchmark] (131,313,130 samples, 0.03%)</title><rect x="18.0" y="357" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="21.04" y="367.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (383,838,380 samples, 0.09%)</title><rect x="271.9" y="357" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="274.91" y="367.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (2,626,262,600 samples, 0.61%)</title><rect x="97.1" y="341" width="7.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="100.11" y="351.5" ></text>
</g>
<g >
<title>[unknown] (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="485" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.19" y="495.5" >[unknown]</text>
</g>
<g >
<title>uniform_real_distribution_custom&lt;float&gt;::operator (131,313,130 samples, 0.03%)</title><rect x="17.3" y="373" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="20.32" y="383.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="293" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="303.5" ></text>
</g>
<g >
<title>__w_log1pf (90,909,090 samples, 0.02%)</title><rect x="27.4" y="357" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="30.43" y="367.5" ></text>
</g>
<g >
<title>genetic::node::node (323,232,320 samples, 0.07%)</title><rect x="284.8" y="421" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="287.78" y="431.5" ></text>
</g>
<g >
<title>genetic::crossover (1,020,202,010 samples, 0.24%)</title><rect x="15.2" y="405" width="2.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="18.22" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n&lt;true&gt;::__uninit_fill_n&lt;float*, unsigned long, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="309" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="20.10" y="319.5" ></text>
</g>
<g >
<title>std::partial_sum&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt; (50,505,050 samples, 0.01%)</title><rect x="16.8" y="373" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="19.77" y="383.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="13.0" y="469" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.98" y="479.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (50,535,353,030 samples, 11.71%)</title><rect x="116.4" y="341" width="138.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="119.44" y="351.5" >genetic::stack&lt;fl..</text>
</g>
<g >
<title>genetic::program::operator= (40,404,040 samples, 0.01%)</title><rect x="14.5" y="437" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="17.53" y="447.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="245" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="20.10" y="255.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;genetic::program const*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;genetic::program*, std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="389" width="0.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="285.10" y="399.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="149" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="159.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="311.0" y="101" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.99" y="111.5" ></text>
</g>
<g >
<title>genetic_benchma (107,888,887,810 samples, 25.00%)</title><rect x="13.9" y="501" width="295.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="16.87" y="511.5" >genetic_benchma</text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_initialize (60,606,060 samples, 0.01%)</title><rect x="17.1" y="357" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="20.07" y="367.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (40,404,040 samples, 0.01%)</title><rect x="309.9" y="181" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="312.86" y="191.5" ></text>
</g>
<g >
<title>/opt/saltstack/ (909,090,900 samples, 0.21%)</title><rect x="10.0" y="501" width="2.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (606,060,600 samples, 0.14%)</title><rect x="33.8" y="325" width="1.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="36.75" y="335.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="389" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="399.5" ></text>
</g>
<g >
<title>philox_random_uint32 (121,212,120 samples, 0.03%)</title><rect x="17.3" y="341" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="20.35" y="351.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (40,404,040 samples, 0.01%)</title><rect x="309.9" y="245" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="312.86" y="255.5" ></text>
</g>
<g >
<title>__cosf_fma (1,848,484,830 samples, 0.43%)</title><rect x="60.9" y="341" width="5.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="63.90" y="351.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.1" y="437" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.12" y="447.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::stack (50,505,050 samples, 0.01%)</title><rect x="273.9" y="357" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="276.90" y="367.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="309" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="319.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::OptimizeGraph (50,505,050 samples, 0.01%)</title><rect x="310.6" y="389" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="313.58" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (171,717,170 samples, 0.04%)</title><rect x="15.5" y="357" width="0.5" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="18.50" y="367.5" ></text>
</g>
<g >
<title>genetic::logLoss&lt;float&gt; (2,828,282,800 samples, 0.66%)</title><rect x="27.7" y="357" width="7.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="30.68" y="367.5" ></text>
</g>
<g >
<title>[unknown] (321,313,128,100 samples, 74.45%)</title><rect x="311.2" y="389" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.24" y="399.5" >[unknown]</text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (40,404,040 samples, 0.01%)</title><rect x="309.9" y="149" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="312.86" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="293" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="36.75" y="303.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="117" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="127.5" ></text>
</g>
<g >
<title>std::lower_bound&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float&gt; (60,606,060 samples, 0.01%)</title><rect x="16.6" y="373" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="19.60" y="383.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (50,505,050 samples, 0.01%)</title><rect x="306.8" y="421" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="309.82" y="431.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (40,404,040 samples, 0.01%)</title><rect x="309.9" y="197" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="312.86" y="207.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (50,505,050 samples, 0.01%)</title><rect x="310.6" y="405" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="313.58" y="415.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (50,505,050 samples, 0.01%)</title><rect x="282.1" y="261" width="0.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="285.13" y="271.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="101" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="111.5" ></text>
</g>
<g >
<title>__fdimf (50,505,050 samples, 0.01%)</title><rect x="66.0" y="341" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="68.96" y="351.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (90,909,090 samples, 0.02%)</title><rect x="310.3" y="309" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="313.28" y="319.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="293" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="20.10" y="303.5" ></text>
</g>
<g >
<title>kworker/0:1-eve (40,404,040 samples, 0.01%)</title><rect x="309.2" y="501" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="312.17" y="511.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="310.8" y="197" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.83" y="207.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (3,898,989,860 samples, 0.90%)</title><rect x="105.8" y="341" width="10.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="108.78" y="351.5" ></text>
</g>
<g >
<title>uniform_int_distribution_custom&lt;int&gt;::operator (40,404,040 samples, 0.01%)</title><rect x="15.1" y="389" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="18.11" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (141,414,140 samples, 0.03%)</title><rect x="284.0" y="421" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="286.98" y="431.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (40,404,040 samples, 0.01%)</title><rect x="17.8" y="341" width="0.1" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="20.76" y="351.5" ></text>
</g>
<g >
<title>multiply_high_low (434,343,430 samples, 0.10%)</title><rect x="279.9" y="309" width="1.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="282.95" y="319.5" ></text>
</g>
<g >
<title>[perf-1990.map] (40,404,040 samples, 0.01%)</title><rect x="310.3" y="197" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.33" y="207.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="310.8" y="229" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.83" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (131,313,130 samples, 0.03%)</title><rect x="16.9" y="373" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="19.90" y="383.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (4,797,979,750 samples, 1.11%)</title><rect x="292.0" y="373" width="13.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="294.96" y="383.5" ></text>
</g>
<g >
<title>node (505,050,500 samples, 0.12%)</title><rect x="309.4" y="501" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="312.36" y="511.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="213" width="1.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="36.75" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (40,404,040 samples, 0.01%)</title><rect x="35.4" y="357" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="38.41" y="367.5" ></text>
</g>
<g >
<title>uv__async_io.part.3 (80,808,080 samples, 0.02%)</title><rect x="309.8" y="373" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="312.81" y="383.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="261" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="271.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="357" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="367.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (50,505,050 samples, 0.01%)</title><rect x="275.6" y="357" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="278.64" y="367.5" ></text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.01%)</title><rect x="310.9" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.94" y="143.5" ></text>
</g>
<g >
<title>std::uninitialized_fill_n&lt;float*, unsigned long, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="325" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="20.10" y="335.5" ></text>
</g>
<g >
<title>__log1pf (2,999,999,970 samples, 0.70%)</title><rect x="19.2" y="357" width="8.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="22.22" y="367.5" ></text>
</g>
<g >
<title>philox_random_uint32 (50,505,050 samples, 0.01%)</title><rect x="276.0" y="341" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="278.97" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (181,818,180 samples, 0.04%)</title><rect x="33.3" y="341" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="36.26" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n_a&lt;float*, unsigned long, float, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="341" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="20.10" y="351.5" ></text>
</g>
<g >
<title>malloc (343,434,340 samples, 0.08%)</title><rect x="307.9" y="485" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="310.87" y="495.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.3" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.26" y="479.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (90,909,090 samples, 0.02%)</title><rect x="310.3" y="325" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="313.28" y="335.5" ></text>
</g>
<g >
<title>record__pushfn (121,212,120 samples, 0.03%)</title><rect x="310.8" y="389" width="0.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="313.77" y="399.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="309" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="285.10" y="319.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="293" width="1.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="277.04" y="303.5" ></text>
</g>
<g >
<title>philox_skip (50,505,050 samples, 0.01%)</title><rect x="281.7" y="325" width="0.1" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="284.66" y="335.5" ></text>
</g>
<g >
<title>genetic::set_batched_fitness (94,212,120,270 samples, 21.83%)</title><rect x="18.0" y="405" width="257.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="21.04" y="415.5" >genetic::set_batched_fitness</text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="275.4" y="69" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.36" y="79.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::back (60,606,060 samples, 0.01%)</title><rect x="15.8" y="325" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="18.80" y="335.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="495.5" ></text>
</g>
<g >
<title>genetic::program::operator= (7,585,858,510 samples, 1.76%)</title><rect x="285.7" y="421" width="20.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="288.67" y="431.5" ></text>
</g>
<g >
<title>all (431,555,551,240 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::PlatformWorkerThread (50,505,050 samples, 0.01%)</title><rect x="310.6" y="469" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="313.58" y="479.5" ></text>
</g>
<g >
<title>[unknown] (909,090,900 samples, 0.21%)</title><rect x="10.0" y="485" width="2.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="13.5" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.54" y="495.5" ></text>
</g>
<g >
<title>[perf-1990.map] (60,606,060 samples, 0.01%)</title><rect x="310.3" y="261" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.28" y="271.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="12.7" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.68" y="495.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (50,505,050 samples, 0.01%)</title><rect x="17.1" y="261" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="20.10" y="271.5" ></text>
</g>
<g >
<title>node::fs::FileHandle::CloseReq::Resolve (40,404,040 samples, 0.01%)</title><rect x="309.9" y="309" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="312.86" y="319.5" ></text>
</g>
<g >
<title>genetic::find_batched_fitness (94,212,120,270 samples, 21.83%)</title><rect x="18.0" y="389" width="257.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="21.04" y="399.5" >genetic::find_batched_fitness</text>
</g>
<g >
<title>__expf_fma (303,030,300 samples, 0.07%)</title><rect x="18.4" y="357" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="21.40" y="367.5" ></text>
</g>
<g >
<title>uv__run_timers (121,212,120 samples, 0.03%)</title><rect x="310.2" y="389" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="313.19" y="399.5" ></text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.01%)</title><rect x="309.4" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.36" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (585,858,580 samples, 0.14%)</title><rect x="274.0" y="373" width="1.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="277.04" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="341" width="1.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="277.04" y="351.5" ></text>
</g>
<g >
<title>multiply_high_low (40,404,040 samples, 0.01%)</title><rect x="278.0" y="325" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="280.99" y="335.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="229" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="239.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (50,505,050 samples, 0.01%)</title><rect x="14.8" y="373" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="17.75" y="383.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::~InternalCallbackScope (40,404,040 samples, 0.01%)</title><rect x="309.9" y="293" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="312.86" y="303.5" ></text>
</g>
<g >
<title>v8::Function::Call (90,909,090 samples, 0.02%)</title><rect x="310.3" y="357" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="313.28" y="367.5" ></text>
</g>
<g >
<title>[unknown] (151,515,150 samples, 0.04%)</title><rect x="35.0" y="101" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.00" y="111.5" ></text>
</g>
<g >
<title>genetic::node::node (323,232,320 samples, 0.07%)</title><rect x="289.4" y="405" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="292.42" y="415.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="453" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="463.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.02%)</title><rect x="310.9" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.91" y="159.5" ></text>
</g>
<g >
<title>insertionSortPrograms (8,989,898,900 samples, 2.08%)</title><rect x="282.4" y="437" width="24.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="285.38" y="447.5" >i..</text>
</g>
<g >
<title>uniform_real_distribution_custom&lt;float&gt;::operator (70,707,070 samples, 0.02%)</title><rect x="281.9" y="405" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="284.88" y="415.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="35.1" y="69" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.08" y="79.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (80,808,080 samples, 0.02%)</title><rect x="290.8" y="389" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="293.83" y="399.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="287.5" ></text>
</g>
<g >
<title>:921 (40,404,040 samples, 0.01%)</title><rect x="13.5" y="501" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="16.54" y="511.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (323,232,320 samples, 0.07%)</title><rect x="309.6" y="437" width="0.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="312.64" y="447.5" ></text>
</g>
<g >
<title>:1627 (50,505,050 samples, 0.01%)</title><rect x="13.3" y="501" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="16.26" y="511.5" ></text>
</g>
<g >
<title>philox_next4 (121,212,120 samples, 0.03%)</title><rect x="17.3" y="325" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="20.35" y="335.5" ></text>
</g>
<g >
<title>__sqrtf_finite@GLIBC_2.15 (111,111,110 samples, 0.03%)</title><rect x="68.7" y="341" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="71.66" y="351.5" ></text>
</g>
<g >
<title>uv__io_poll (131,313,130 samples, 0.03%)</title><rect x="309.8" y="389" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="312.81" y="399.5" ></text>
</g>
<g >
<title>[unknown] (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="453" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.19" y="463.5" >[unknown]</text>
</g>
<g >
<title>git (101,010,100 samples, 0.02%)</title><rect x="308.9" y="501" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="311.87" y="511.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (40,404,040 samples, 0.01%)</title><rect x="309.9" y="277" width="0.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="312.86" y="287.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="255.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (50,505,050 samples, 0.01%)</title><rect x="276.0" y="357" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="278.97" y="367.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="421" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="431.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::stack (6,323,232,260 samples, 1.47%)</title><rect x="254.6" y="341" width="17.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="257.62" y="351.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.3" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.26" y="495.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (181,818,180 samples, 0.04%)</title><rect x="15.5" y="373" width="0.5" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="18.47" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="309" width="1.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="36.75" y="319.5" ></text>
</g>
<g >
<title>main (131,313,130 samples, 0.03%)</title><rect x="310.7" y="469" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="313.74" y="479.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (40,404,040 samples, 0.01%)</title><rect x="309.9" y="261" width="0.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="312.86" y="271.5" ></text>
</g>
<g >
<title>bernoulli_distribution_custom&lt;float&gt;::operator (50,505,050 samples, 0.01%)</title><rect x="14.8" y="389" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="17.75" y="399.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="35.1" y="53" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.13" y="63.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.03%)</title><rect x="1189.5" y="261" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.50" y="271.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="13.9" y="293" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.92" y="303.5" ></text>
</g>
<g >
<title>perf (131,313,130 samples, 0.03%)</title><rect x="310.7" y="501" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="313.74" y="511.5" ></text>
</g>
<g >
<title>[unknown] (107,464,645,390 samples, 24.90%)</title><rect x="896.0" y="325" width="293.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.97" y="335.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.01%)</title><rect x="13.1" y="453" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.09" y="463.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;genetic::node*&gt; (60,606,060 samples, 0.01%)</title><rect x="306.2" y="389" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="309.24" y="399.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::stack&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, void&gt; (40,404,040 samples, 0.01%)</title><rect x="16.0" y="373" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="19.02" y="383.5" ></text>
</g>
<g >
<title>cmd_record (131,313,130 samples, 0.03%)</title><rect x="310.7" y="437" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="313.74" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="309" width="1.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="277.04" y="319.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="310.8" y="213" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.83" y="223.5" ></text>
</g>
<g >
<title>genetic::tournament_kernel (2,060,606,040 samples, 0.48%)</title><rect x="276.2" y="405" width="5.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="279.25" y="415.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="261" width="1.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="36.75" y="271.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="213" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="223.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::pop (50,505,050 samples, 0.01%)</title><rect x="15.3" y="373" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="18.33" y="383.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="133" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="143.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="405" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="415.5" ></text>
</g>
<g >
<title>__sqrtf (141,414,140 samples, 0.03%)</title><rect x="68.3" y="341" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="71.28" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="293" width="0.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="285.10" y="303.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (50,505,050 samples, 0.01%)</title><rect x="17.8" y="373" width="0.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="20.76" y="383.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (80,808,080 samples, 0.02%)</title><rect x="17.7" y="389" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="20.71" y="399.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;genetic::node*&gt; (90,909,090 samples, 0.02%)</title><rect x="306.0" y="389" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="308.99" y="399.5" ></text>
</g>
<g >
<title>genetic::symFit (97,919,190,940 samples, 22.69%)</title><rect x="14.6" y="437" width="267.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="17.64" y="447.5" >genetic::symFit</text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, genetic::node*, genetic::node*&gt; (40,404,040 samples, 0.01%)</title><rect x="305.1" y="373" width="0.1" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="308.08" y="383.5" ></text>
</g>
<g >
<title>multiply_high_low (40,404,040 samples, 0.01%)</title><rect x="14.8" y="309" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="17.75" y="319.5" ></text>
</g>
<g >
<title>node::fs::FileHandle::ClosePromise (40,404,040 samples, 0.01%)</title><rect x="309.9" y="325" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="312.86" y="335.5" ></text>
</g>
<g >
<title>__brk (50,505,050 samples, 0.01%)</title><rect x="13.9" y="469" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="16.89" y="479.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.02%)</title><rect x="310.9" y="165" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.91" y="175.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="437" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="447.5" ></text>
</g>
<g >
<title>genetic::crossover (50,505,050 samples, 0.01%)</title><rect x="276.1" y="389" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="279.11" y="399.5" ></text>
</g>
<g >
<title>run_symbolic_classification (106,949,493,880 samples, 24.78%)</title><rect x="14.5" y="453" width="292.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="17.53" y="463.5" >run_symbolic_classification</text>
</g>
<g >
<title>philox_next4 (40,404,040 samples, 0.01%)</title><rect x="276.0" y="325" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="278.97" y="335.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (40,404,040 samples, 0.01%)</title><rect x="309.9" y="165" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="312.86" y="175.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.02%)</title><rect x="1189.6" y="229" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.61" y="239.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.03%)</title><rect x="1189.5" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.50" y="287.5" ></text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.01%)</title><rect x="310.9" y="117" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.94" y="127.5" ></text>
</g>
<g >
<title>genetic::node::operator= (282,828,280 samples, 0.07%)</title><rect x="292.5" y="341" width="0.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="295.52" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::node*, genetic::node*&gt; (40,404,040 samples, 0.01%)</title><rect x="292.2" y="357" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="295.18" y="367.5" ></text>
</g>
<g >
<title>genetic::detail::arity (414,141,410 samples, 0.10%)</title><rect x="35.5" y="357" width="1.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="38.52" y="367.5" ></text>
</g>
<g >
<title>[unknown] (321,262,623,050 samples, 74.44%)</title><rect x="311.4" y="357" width="878.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.38" y="367.5" >[unknown]</text>
</g>
<g >
<title>philox_next4 (50,505,050 samples, 0.01%)</title><rect x="275.6" y="325" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="278.64" y="335.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (121,212,120 samples, 0.03%)</title><rect x="17.3" y="357" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="20.35" y="367.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.02%)</title><rect x="1189.6" y="245" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.61" y="255.5" ></text>
</g>
<g >
<title>genetic::node::operator= (3,111,111,080 samples, 0.72%)</title><rect x="296.6" y="325" width="8.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="299.58" y="335.5" ></text>
</g>
<g >
<title>std::stack&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::top (40,404,040 samples, 0.01%)</title><rect x="16.1" y="373" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="19.13" y="383.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (323,232,320 samples, 0.07%)</title><rect x="309.6" y="453" width="0.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="312.64" y="463.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;genetic::node*&gt; (131,313,130 samples, 0.03%)</title><rect x="305.6" y="389" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="308.64" y="399.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (1,797,979,780 samples, 0.42%)</title><rect x="99.4" y="325" width="4.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="102.38" y="335.5" ></text>
</g>
<g >
<title>__libc_start_call_main (106,949,493,880 samples, 24.78%)</title><rect x="14.5" y="485" width="292.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.53" y="495.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="325" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="277.04" y="335.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="309.2" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.17" y="479.5" ></text>
</g>
<g >
<title>bernoulli_distribution_custom&lt;float&gt;::operator (50,505,050 samples, 0.01%)</title><rect x="275.6" y="373" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="278.64" y="383.5" ></text>
</g>
<g >
<title>philox_random_uint32 (70,707,070 samples, 0.02%)</title><rect x="281.9" y="373" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="284.88" y="383.5" ></text>
</g>
<g >
<title>[perf-1990.map] (60,606,060 samples, 0.01%)</title><rect x="310.3" y="277" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.28" y="287.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist.constprop.0 (121,212,120 samples, 0.03%)</title><rect x="310.8" y="421" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="313.77" y="431.5" ></text>
</g>
<g >
<title>genetic::build_program (191,919,190 samples, 0.04%)</title><rect x="14.7" y="405" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="17.70" y="415.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="12.7" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.68" y="479.5" ></text>
</g>
<g >
<title>[unknown] (107,454,544,380 samples, 24.90%)</title><rect x="896.0" y="293" width="293.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.99" y="303.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (808,080,800 samples, 0.19%)</title><rect x="10.3" y="469" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.28" y="479.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="13.5" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.54" y="479.5" ></text>
</g>
<g >
<title>uv_run (323,232,320 samples, 0.07%)</title><rect x="309.6" y="405" width="0.9" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="312.64" y="415.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (1,686,868,670 samples, 0.39%)</title><rect x="277.2" y="373" width="4.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="280.24" y="383.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (151,515,150 samples, 0.04%)</title><rect x="307.5" y="485" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="310.46" y="495.5" ></text>
</g>
<g >
<title>[unknown] (171,717,170 samples, 0.04%)</title><rect x="34.9" y="133" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="37.94" y="143.5" ></text>
</g>
<g >
<title>uniform_int_distribution_custom&lt;int&gt;::operator (50,505,050 samples, 0.01%)</title><rect x="276.0" y="373" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="278.97" y="383.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::node*, genetic::node*&gt; (4,313,131,270 samples, 1.00%)</title><rect x="293.3" y="341" width="11.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="296.29" y="351.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float, __gnu_cxx::__ops::_Iter_less_val&gt; (60,606,060 samples, 0.01%)</title><rect x="16.6" y="357" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="19.60" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;::operator= (60,606,060 samples, 0.01%)</title><rect x="282.1" y="421" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="285.10" y="431.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (565,656,560 samples, 0.13%)</title><rect x="36.7" y="357" width="1.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="39.65" y="367.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, genetic::node*, genetic::node*&gt; (5,333,333,280 samples, 1.24%)</title><rect x="291.1" y="389" width="14.5" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="294.05" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::program const*, genetic::program*&gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="341" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="285.10" y="351.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;genetic::node*&gt; (131,313,130 samples, 0.03%)</title><rect x="305.2" y="373" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="308.19" y="383.5" ></text>
</g>
<g >
<title>[unknown] (90,909,090 samples, 0.02%)</title><rect x="310.9" y="181" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.86" y="191.5" ></text>
</g>
<g >
<title>philox_random_uint32 (1,676,767,660 samples, 0.39%)</title><rect x="277.3" y="357" width="4.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="280.27" y="367.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="310.8" y="341" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.77" y="351.5" ></text>
</g>
<g >
<title>[unknown] (242,424,240 samples, 0.06%)</title><rect x="13.9" y="485" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.87" y="495.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::node*, genetic::node*&gt; (40,404,040 samples, 0.01%)</title><rect x="17.8" y="357" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="20.76" y="367.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="165" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="175.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="341" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="351.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.01%)</title><rect x="13.1" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.15" y="367.5" ></text>
</g>
<g >
<title>[unknown] (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="469" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.19" y="479.5" >[unknown]</text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="261" width="1.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="277.04" y="271.5" ></text>
</g>
<g >
<title>[genetic_benchmark] (70,707,070 samples, 0.02%)</title><rect x="60.7" y="341" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="63.71" y="351.5" ></text>
</g>
<g >
<title>__libc_start_call_main (131,313,130 samples, 0.03%)</title><rect x="310.7" y="485" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="313.74" y="495.5" ></text>
</g>
<g >
<title>genetic::execute_kernel&lt;20&gt; (84,505,049,660 samples, 19.58%)</title><rect x="40.9" y="357" width="231.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="43.85" y="367.5" >genetic::execute_kernel&lt;20&gt;</text>
</g>
<g >
<title>[perf-1990.map] (50,505,050 samples, 0.01%)</title><rect x="310.3" y="213" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.30" y="223.5" ></text>
</g>
<g >
<title>philox_next4 (1,656,565,640 samples, 0.38%)</title><rect x="277.3" y="341" width="4.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="280.27" y="351.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="437" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="447.5" ></text>
</g>
<g >
<title>genetic::program::operator= (60,606,060 samples, 0.01%)</title><rect x="282.1" y="325" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="285.10" y="335.5" ></text>
</g>
<g >
<title>[unknown] (141,414,140 samples, 0.03%)</title><rect x="35.0" y="85" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.02" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt;, std::allocator&lt;std::vector&lt;genetic::program, std::allocator&lt;genetic::program&gt; &gt; &gt; &gt;::push_back (40,404,040 samples, 0.01%)</title><rect x="282.3" y="421" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="285.27" y="431.5" ></text>
</g>
<g >
<title>v8::internal::OptimizingCompileDispatcher::CompileNext (50,505,050 samples, 0.01%)</title><rect x="310.6" y="437" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="313.58" y="447.5" ></text>
</g>
<g >
<title>genetic::cpp_evolve (97,808,079,830 samples, 22.66%)</title><rect x="14.6" y="421" width="267.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="17.64" y="431.5" >genetic::cpp_evolve</text>
</g>
<g >
<title>philox_oneround (50,505,050 samples, 0.01%)</title><rect x="281.9" y="341" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="284.91" y="351.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.1" y="389" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.12" y="399.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="181" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="191.5" ></text>
</g>
<g >
<title>_int_free (151,515,150 samples, 0.04%)</title><rect x="307.0" y="485" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="309.96" y="495.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="245" width="1.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="36.75" y="255.5" ></text>
</g>
<g >
<title>[unknown] (107,454,544,380 samples, 24.90%)</title><rect x="896.0" y="309" width="293.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.99" y="319.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (107,464,645,390 samples, 24.90%)</title><rect x="896.0" y="341" width="293.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.97" y="351.5" >[unknown]</text>
</g>
<g >
<title>[perf-1990.map] (60,606,060 samples, 0.01%)</title><rect x="310.3" y="229" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.28" y="239.5" ></text>
</g>
<g >
<title>malloc (40,404,040 samples, 0.01%)</title><rect x="306.4" y="421" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="309.41" y="431.5" ></text>
</g>
<g >
<title>[unknown] (242,424,240 samples, 0.06%)</title><rect x="34.7" y="197" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="37.75" y="207.5" ></text>
</g>
<g >
<title>[unknown] (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="437" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.19" y="447.5" >[unknown]</text>
</g>
<g >
<title>philox_oneround (40,404,040 samples, 0.01%)</title><rect x="14.8" y="325" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="17.75" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;genetic::node*, genetic::node*&gt; (40,404,040 samples, 0.01%)</title><rect x="282.2" y="245" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="285.16" y="255.5" ></text>
</g>
<g >
<title>v8::internal::OptimizedCompilationJob::ExecuteJob (50,505,050 samples, 0.01%)</title><rect x="310.6" y="421" width="0.1" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="313.58" y="431.5" ></text>
</g>
<g >
<title>philox_random_uint32 (40,404,040 samples, 0.01%)</title><rect x="15.1" y="357" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="18.11" y="367.5" ></text>
</g>
<g >
<title>philox_oneround (70,707,070 samples, 0.02%)</title><rect x="17.4" y="309" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="20.43" y="319.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.02%)</title><rect x="308.9" y="485" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.92" y="495.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="325" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="335.5" ></text>
</g>
<g >
<title>run_builtin (131,313,130 samples, 0.03%)</title><rect x="310.7" y="453" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="313.74" y="463.5" ></text>
</g>
<g >
<title>_int_free (181,818,180 samples, 0.04%)</title><rect x="14.0" y="469" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.03" y="479.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (121,212,120 samples, 0.03%)</title><rect x="310.2" y="373" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="313.19" y="383.5" ></text>
</g>
<g >
<title>genetic::compute_metric (6,393,939,330 samples, 1.48%)</title><rect x="18.0" y="373" width="17.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="21.04" y="383.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.02%)</title><rect x="275.4" y="85" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.36" y="95.5" ></text>
</g>
<g >
<title>philox_random_uint32 (50,505,050 samples, 0.01%)</title><rect x="14.8" y="357" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="17.75" y="367.5" ></text>
</g>
<g >
<title>genetic::get_depth (393,939,390 samples, 0.09%)</title><rect x="15.2" y="389" width="1.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="18.25" y="399.5" ></text>
</g>
<g >
<title>node::MakeLibuvRequestCallback&lt;uv_fs_s, void  (60,606,060 samples, 0.01%)</title><rect x="309.8" y="341" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="312.81" y="351.5" ></text>
</g>
<g >
<title>genetic::build_program (171,717,170 samples, 0.04%)</title><rect x="275.6" y="389" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="278.64" y="399.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (9,111,111,020 samples, 2.11%)</title><rect x="72.2" y="341" width="24.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="75.20" y="351.5" >g..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (151,515,150 samples, 0.04%)</title><rect x="284.4" y="421" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="287.37" y="431.5" ></text>
</g>
<g >
<title>start_thread (60,606,060 samples, 0.01%)</title><rect x="310.6" y="485" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="313.58" y="495.5" ></text>
</g>
<g >
<title>[unknown] (242,424,240 samples, 0.06%)</title><rect x="34.7" y="165" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="37.75" y="175.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="421" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="431.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (40,404,040 samples, 0.01%)</title><rect x="15.1" y="373" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="18.11" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (585,858,580 samples, 0.14%)</title><rect x="274.0" y="357" width="1.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="277.04" y="367.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (343,434,340 samples, 0.08%)</title><rect x="273.0" y="357" width="0.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="275.96" y="367.5" ></text>
</g>
<g >
<title>std::copy&lt;genetic::node*, genetic::node*&gt; (5,848,484,790 samples, 1.36%)</title><rect x="290.4" y="405" width="16.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="293.42" y="415.5" ></text>
</g>
<g >
<title>genetic::get_subtree (494,949,490 samples, 0.11%)</title><rect x="16.3" y="389" width="1.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="19.32" y="399.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="367.5" ></text>
</g>
<g >
<title>[unknown] (321,323,229,110 samples, 74.46%)</title><rect x="311.2" y="405" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.21" y="415.5" >[unknown]</text>
</g>
<g >
<title>perf_mmap__push (121,212,120 samples, 0.03%)</title><rect x="310.8" y="405" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="313.77" y="415.5" ></text>
</g>
<g >
<title>philox_next4 (50,505,050 samples, 0.01%)</title><rect x="14.8" y="341" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="17.75" y="351.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (969,696,960 samples, 0.22%)</title><rect x="38.2" y="357" width="2.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="41.20" y="367.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (90,909,090 samples, 0.02%)</title><rect x="310.3" y="293" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="313.28" y="303.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.03%)</title><rect x="13.0" y="485" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.96" y="495.5" ></text>
</g>
<g >
<title>operator new (70,707,070 samples, 0.02%)</title><rect x="306.6" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="309.63" y="431.5" ></text>
</g>
<g >
<title>[perf-1990.map] (60,606,060 samples, 0.01%)</title><rect x="310.3" y="245" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.28" y="255.5" ></text>
</g>
<g >
<title>:1611 (50,505,050 samples, 0.01%)</title><rect x="12.7" y="501" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="15.68" y="511.5" ></text>
</g>
<g >
<title>main (106,949,493,880 samples, 24.78%)</title><rect x="14.5" y="469" width="292.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="17.53" y="479.5" >main</text>
</g>
<g >
<title>genetic::detail::is_terminal (545,454,540 samples, 0.13%)</title><rect x="104.3" y="341" width="1.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="107.29" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, genetic::program const*, genetic::program*&gt; (60,606,060 samples, 0.01%)</title><rect x="282.1" y="373" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="285.10" y="383.5" ></text>
</g>
<g >
<title>uniform_int_distribution_custom&lt;int&gt;::operator (1,767,676,750 samples, 0.41%)</title><rect x="277.0" y="389" width="4.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="280.05" y="399.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.03%)</title><rect x="275.3" y="197" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.31" y="207.5" ></text>
</g>
<g >
<title>swapper (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="501" width="878.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="314.19" y="511.5" >swapper</text>
</g>
<g >
<title>v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (50,505,050 samples, 0.01%)</title><rect x="310.6" y="453" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="313.58" y="463.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (585,858,580 samples, 0.14%)</title><rect x="274.0" y="245" width="1.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="277.04" y="255.5" ></text>
</g>
<g >
<title>philox_raisekey (191,919,190 samples, 0.04%)</title><rect x="281.1" y="325" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="284.14" y="335.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.9" y="405" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.89" y="415.5" ></text>
</g>
<g >
<title>PhiloxEngine::operator (70,707,070 samples, 0.02%)</title><rect x="281.9" y="389" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="284.88" y="399.5" ></text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (40,404,040 samples, 0.01%)</title><rect x="309.9" y="229" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="312.86" y="239.5" ></text>
</g>
<g >
<title>[unknown] (321,333,330,120 samples, 74.46%)</title><rect x="311.2" y="421" width="878.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="314.19" y="431.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.01%)</title><rect x="13.1" y="373" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.12" y="383.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (40,404,040 samples, 0.01%)</title><rect x="309.9" y="213" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="312.86" y="223.5" ></text>
</g>
<g >
<title>[unknown] (242,424,240 samples, 0.06%)</title><rect x="34.7" y="181" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="37.75" y="191.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (606,060,600 samples, 0.14%)</title><rect x="33.8" y="229" width="1.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="36.75" y="239.5" ></text>
</g>
</g>
</svg>
