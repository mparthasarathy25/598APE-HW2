<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>[unknown] (282,828,280 samples, 0.02%)</title><rect x="11.5" y="357" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.47" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="213" width="0.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="309.07" y="223.5" ></text>
</g>
<g >
<title>genetic::meanSquareError&lt;float&gt; (2,444,444,420 samples, 0.21%)</title><rect x="12.2" y="229" width="2.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="15.15" y="239.5" ></text>
</g>
<g >
<title>[unknown] (873,010,092,280 samples, 74.65%)</title><rect x="308.8" y="341" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.79" y="351.5" >[unknown]</text>
</g>
<g >
<title>/opt/saltstack/ (1,212,121,200 samples, 0.10%)</title><rect x="10.0" y="373" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>[unknown] (272,727,270 samples, 0.02%)</title><rect x="11.5" y="325" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.48" y="335.5" ></text>
</g>
<g >
<title>git (111,111,110 samples, 0.01%)</title><rect x="307.0" y="373" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="309.98" y="383.5" ></text>
</g>
<g >
<title>[unknown] (872,999,991,270 samples, 74.65%)</title><rect x="308.8" y="293" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.80" y="303.5" >[unknown]</text>
</g>
<g >
<title>genetic::find_batched_fitness (291,959,593,040 samples, 24.97%)</title><rect x="12.2" y="261" width="294.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.15" y="271.5" >genetic::find_batched_fitness</text>
</g>
<g >
<title>[unknown] (232,323,230 samples, 0.02%)</title><rect x="11.5" y="261" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.52" y="271.5" ></text>
</g>
<g >
<title>node::SpinEventLoopInternal (737,373,730 samples, 0.06%)</title><rect x="307.6" y="293" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="310.56" y="303.5" ></text>
</g>
<g >
<title>[unknown] (222,222,220 samples, 0.02%)</title><rect x="306.5" y="101" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="309.52" y="111.5" ></text>
</g>
<g >
<title>__sinf_fma (3,565,656,530 samples, 0.30%)</title><rect x="57.0" y="213" width="3.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="59.99" y="223.5" ></text>
</g>
<g >
<title>[unknown] (494,949,490 samples, 0.04%)</title><rect x="1189.2" y="149" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.17" y="159.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.01%)</title><rect x="1189.9" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.89" y="367.5" ></text>
</g>
<g >
<title>genetic::detail::arity (1,222,222,210 samples, 0.10%)</title><rect x="14.7" y="229" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.74" y="239.5" ></text>
</g>
<g >
<title>[unknown] (873,010,092,280 samples, 74.65%)</title><rect x="308.8" y="309" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.79" y="319.5" >[unknown]</text>
</g>
<g >
<title>genetic::execute (288,727,269,840 samples, 24.69%)</title><rect x="14.7" y="245" width="291.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="17.74" y="255.5" >genetic::execute</text>
</g>
<g >
<title>:921 (141,414,140 samples, 0.01%)</title><rect x="11.9" y="373" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.87" y="383.5" ></text>
</g>
<g >
<title>[perf-1990.map] (101,010,100 samples, 0.01%)</title><rect x="308.2" y="133" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="311.18" y="143.5" ></text>
</g>
<g >
<title>__libc_start_call_main (737,373,730 samples, 0.06%)</title><rect x="307.6" y="357" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="310.56" y="367.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (8,757,575,670 samples, 0.75%)</title><rect x="101.7" y="213" width="8.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="104.74" y="223.5" ></text>
</g>
<g >
<title>[unknown] (289,767,673,870 samples, 24.78%)</title><rect x="897.3" y="165" width="292.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="900.29" y="175.5" >[unknown]</text>
</g>
<g >
<title>node::MakeLibuvRequestCallback&lt;uv_fs_s, void  (181,818,180 samples, 0.02%)</title><rect x="307.7" y="213" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="310.68" y="223.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (157,838,382,260 samples, 13.50%)</title><rect x="133.5" y="213" width="159.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="136.47" y="223.5" >genetic::stack&lt;float..</text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="149" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="309.07" y="159.5" ></text>
</g>
<g >
<title>node::StreamBase::CallJSOnreadMethod (101,010,100 samples, 0.01%)</title><rect x="307.9" y="165" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="310.90" y="175.5" ></text>
</g>
<g >
<title>main (121,212,120 samples, 0.01%)</title><rect x="308.6" y="341" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="311.62" y="351.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (101,010,100 samples, 0.01%)</title><rect x="307.9" y="149" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="310.90" y="159.5" ></text>
</g>
<g >
<title>__logf_fma (4,404,040,360 samples, 0.38%)</title><rect x="52.5" y="213" width="4.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="55.52" y="223.5" ></text>
</g>
<g >
<title>node::Start (737,373,730 samples, 0.06%)</title><rect x="307.6" y="341" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="310.56" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (666,666,660 samples, 0.06%)</title><rect x="306.1" y="245" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="309.07" y="255.5" ></text>
</g>
<g >
<title>uv_run (737,373,730 samples, 0.06%)</title><rect x="307.6" y="277" width="0.7" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="310.56" y="287.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="306.6" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="309.64" y="63.5" ></text>
</g>
<g >
<title>genetic::detail::is_nonterminal (3,262,626,230 samples, 0.28%)</title><rect x="17.8" y="229" width="3.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="20.82" y="239.5" ></text>
</g>
<g >
<title>[unknown] (141,414,140 samples, 0.01%)</title><rect x="11.9" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.87" y="367.5" ></text>
</g>
<g >
<title>genetic_benchma (292,292,926,370 samples, 24.99%)</title><rect x="12.0" y="373" width="295.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="15.05" y="383.5" >genetic_benchma</text>
</g>
<g >
<title>cmd_record (111,111,110 samples, 0.01%)</title><rect x="308.6" y="309" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="311.62" y="319.5" ></text>
</g>
<g >
<title>[unknown] (289,767,673,870 samples, 24.78%)</title><rect x="897.3" y="181" width="292.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="900.29" y="191.5" >[unknown]</text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (121,212,120 samples, 0.01%)</title><rect x="13.8" y="213" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="16.82" y="223.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="293" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="303.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (101,010,100 samples, 0.01%)</title><rect x="307.9" y="133" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="310.90" y="143.5" ></text>
</g>
<g >
<title>[unknown] (873,010,092,280 samples, 74.65%)</title><rect x="308.8" y="357" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.79" y="367.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="325" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (121,212,120 samples, 0.01%)</title><rect x="14.6" y="229" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="17.62" y="239.5" ></text>
</g>
<g >
<title>uv__io_poll (373,737,370 samples, 0.03%)</title><rect x="307.6" y="261" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="310.65" y="271.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (36,111,110,750 samples, 3.09%)</title><rect x="65.3" y="213" width="36.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="68.30" y="223.5" >gen..</text>
</g>
<g >
<title>node::LibuvStreamWrap::ReadStart (121,212,120 samples, 0.01%)</title><rect x="307.9" y="213" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="310.90" y="223.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.01%)</title><rect x="14.5" y="69" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.50" y="79.5" ></text>
</g>
<g >
<title>[unknown] (289,888,885,990 samples, 24.79%)</title><rect x="897.2" y="197" width="292.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="900.17" y="207.5" >[unknown]</text>
</g>
<g >
<title>[genetic_benchmark] (292,929,290 samples, 0.03%)</title><rect x="44.8" y="213" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="47.85" y="223.5" ></text>
</g>
<g >
<title>genetic::cpp_evolve (292,090,906,170 samples, 24.98%)</title><rect x="12.0" y="293" width="294.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="15.05" y="303.5" >genetic::cpp_evolve</text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="261" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="271.5" ></text>
</g>
<g >
<title>genetic::detail::evaluate_node (1,828,282,810 samples, 0.16%)</title><rect x="16.0" y="229" width="1.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.97" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_open (101,010,100 samples, 0.01%)</title><rect x="307.3" y="341" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="310.34" y="351.5" ></text>
</g>
<g >
<title>uv__stream_io (131,313,130 samples, 0.01%)</title><rect x="307.9" y="245" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="310.89" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="181" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="309.07" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;float*, unsigned long&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="149" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="16.94" y="159.5" ></text>
</g>
<g >
<title>[unknown] (872,989,890,260 samples, 74.65%)</title><rect x="308.8" y="277" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.81" y="287.5" >[unknown]</text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (121,212,120 samples, 0.01%)</title><rect x="307.9" y="197" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="310.90" y="207.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (151,515,150 samples, 0.01%)</title><rect x="308.1" y="213" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="311.15" y="223.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="117" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="309.07" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (666,666,660 samples, 0.06%)</title><rect x="13.9" y="213" width="0.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="16.94" y="223.5" ></text>
</g>
<g >
<title>__fdimf (434,343,430 samples, 0.04%)</title><rect x="52.1" y="213" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="55.08" y="223.5" ></text>
</g>
<g >
<title>[unknown] (272,727,270 samples, 0.02%)</title><rect x="11.5" y="341" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.48" y="351.5" ></text>
</g>
<g >
<title>[unknown] (494,949,490 samples, 0.04%)</title><rect x="1189.2" y="133" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.17" y="143.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (151,515,150 samples, 0.01%)</title><rect x="308.1" y="197" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="311.15" y="207.5" ></text>
</g>
<g >
<title>[unknown] (872,888,880,160 samples, 74.64%)</title><rect x="308.9" y="245" width="880.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.91" y="255.5" >[unknown]</text>
</g>
<g >
<title>[perf-1990.map] (101,010,100 samples, 0.01%)</title><rect x="308.2" y="149" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="311.18" y="159.5" ></text>
</g>
<g >
<title>main (292,242,421,320 samples, 24.99%)</title><rect x="12.0" y="341" width="294.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="15.05" y="351.5" >main</text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.01%)</title><rect x="1189.6" y="85" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.55" y="95.5" ></text>
</g>
<g >
<title>[unknown] (454,545,450 samples, 0.04%)</title><rect x="1189.2" y="117" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.22" y="127.5" ></text>
</g>
<g >
<title>[unknown] (131,313,130 samples, 0.01%)</title><rect x="11.9" y="341" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.88" y="351.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="133" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="309.07" y="143.5" ></text>
</g>
<g >
<title>[unknown] (161,616,160 samples, 0.01%)</title><rect x="11.6" y="181" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.59" y="191.5" ></text>
</g>
<g >
<title>run_builtin (121,212,120 samples, 0.01%)</title><rect x="308.6" y="325" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="311.62" y="335.5" ></text>
</g>
<g >
<title>__libc_start_call_main (292,242,421,320 samples, 24.99%)</title><rect x="12.0" y="357" width="294.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.05" y="367.5" >__libc_start_call_main</text>
</g>
<g >
<title>[unknown] (252,525,250 samples, 0.02%)</title><rect x="11.5" y="293" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.50" y="303.5" ></text>
</g>
<g >
<title>start_thread (181,818,180 samples, 0.02%)</title><rect x="308.4" y="357" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="311.43" y="367.5" ></text>
</g>
<g >
<title>[unknown] (222,222,220 samples, 0.02%)</title><rect x="11.5" y="229" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.53" y="239.5" ></text>
</g>
<g >
<title>genetic::detail::is_terminal (2,767,676,740 samples, 0.24%)</title><rect x="110.6" y="213" width="2.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="113.58" y="223.5" ></text>
</g>
<g >
<title>swapper (873,010,092,280 samples, 74.65%)</title><rect x="308.8" y="373" width="880.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="311.79" y="383.5" >swapper</text>
</g>
<g >
<title>genetic::detail::is_terminal (6,404,040,340 samples, 0.55%)</title><rect x="104.1" y="197" width="6.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="107.11" y="207.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::push (1,494,949,480 samples, 0.13%)</title><rect x="304.5" y="229" width="1.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="307.47" y="239.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="306.6" y="37" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="309.64" y="47.5" ></text>
</g>
<g >
<title>[unknown] (202,020,200 samples, 0.02%)</title><rect x="11.5" y="213" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.55" y="223.5" ></text>
</g>
<g >
<title>__cosf_fma (4,191,919,150 samples, 0.36%)</title><rect x="45.1" y="213" width="4.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="48.14" y="223.5" ></text>
</g>
<g >
<title>[unknown] (222,222,220 samples, 0.02%)</title><rect x="11.5" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.53" y="255.5" ></text>
</g>
<g >
<title>[unknown] (872,888,880,160 samples, 74.64%)</title><rect x="308.9" y="229" width="880.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.91" y="239.5" >[unknown]</text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="165" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="16.94" y="175.5" ></text>
</g>
<g >
<title>tokio-runtime-w (191,919,190 samples, 0.02%)</title><rect x="1189.7" y="373" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1192.69" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;float*, unsigned long&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="197" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="309.07" y="207.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::stack (10,040,403,940 samples, 0.86%)</title><rect x="292.7" y="213" width="10.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="295.73" y="223.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (737,373,730 samples, 0.06%)</title><rect x="307.6" y="325" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="310.56" y="335.5" ></text>
</g>
<g >
<title>genetic::compute_metric (2,565,656,540 samples, 0.22%)</title><rect x="12.2" y="245" width="2.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="15.15" y="255.5" ></text>
</g>
<g >
<title>[unknown] (873,010,092,280 samples, 74.65%)</title><rect x="308.8" y="325" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.79" y="335.5" >[unknown]</text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (1,555,555,540 samples, 0.13%)</title><rect x="302.9" y="229" width="1.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="305.90" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1,060,606,050 samples, 0.09%)</title><rect x="10.2" y="341" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.15" y="351.5" ></text>
</g>
<g >
<title>uv__run_timers (222,222,220 samples, 0.02%)</title><rect x="308.1" y="261" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="311.08" y="271.5" ></text>
</g>
<g >
<title>[unknown] (181,818,180 samples, 0.02%)</title><rect x="11.6" y="197" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.57" y="207.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;float*, float&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="101" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="16.94" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (666,666,660 samples, 0.06%)</title><rect x="306.1" y="229" width="0.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="309.07" y="239.5" ></text>
</g>
<g >
<title>uv__read (121,212,120 samples, 0.01%)</title><rect x="307.9" y="229" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="310.90" y="239.5" ></text>
</g>
<g >
<title>__libc_start_call_main (121,212,120 samples, 0.01%)</title><rect x="308.6" y="357" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="311.62" y="367.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="309" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="319.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.01%)</title><rect x="14.5" y="37" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.50" y="47.5" ></text>
</g>
<g >
<title>[unknown] (232,323,230 samples, 0.02%)</title><rect x="11.5" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.52" y="287.5" ></text>
</g>
<g >
<title>std::__fill_a1&lt;float*, float&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="85" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="16.94" y="95.5" ></text>
</g>
<g >
<title>[unknown] (111,111,110 samples, 0.01%)</title><rect x="14.5" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.50" y="63.5" ></text>
</g>
<g >
<title>[unknown] (454,545,450 samples, 0.04%)</title><rect x="1189.2" y="101" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.22" y="111.5" ></text>
</g>
<g >
<title>node (1,303,030,290 samples, 0.11%)</title><rect x="307.3" y="373" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="310.30" y="383.5" ></text>
</g>
<g >
<title>uv__work_done (181,818,180 samples, 0.02%)</title><rect x="307.7" y="229" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="310.68" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1,212,121,200 samples, 0.10%)</title><rect x="10.0" y="357" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="133" width="0.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="16.94" y="143.5" ></text>
</g>
<g >
<title>:1620 (282,828,280 samples, 0.02%)</title><rect x="11.5" y="373" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="14.47" y="383.5" ></text>
</g>
<g >
<title>genetic::execute_kernel&lt;20&gt; (279,272,724,480 samples, 23.88%)</title><rect x="21.1" y="229" width="281.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="24.11" y="239.5" >genetic::execute_kernel&lt;20&gt;</text>
</g>
<g >
<title>genetic::set_batched_fitness (291,959,593,040 samples, 24.97%)</title><rect x="12.2" y="277" width="294.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="15.15" y="287.5" >genetic::set_batched_fitness</text>
</g>
<g >
<title>[unknown] (565,656,560 samples, 0.05%)</title><rect x="10.7" y="325" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.65" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_default_initialize (666,666,660 samples, 0.06%)</title><rect x="13.9" y="197" width="0.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="16.94" y="207.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="245" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="255.5" ></text>
</g>
<g >
<title>genetic::symFit (292,111,108,190 samples, 24.98%)</title><rect x="12.0" y="309" width="294.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="15.05" y="319.5" >genetic::symFit</text>
</g>
<g >
<title>run_symbolic_regression (292,242,421,320 samples, 24.99%)</title><rect x="12.0" y="325" width="294.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="15.05" y="335.5" >run_symbolic_regression</text>
</g>
<g >
<title>genetic::detail::arity (4,676,767,630 samples, 0.40%)</title><rect x="60.6" y="213" width="4.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="63.58" y="223.5" ></text>
</g>
<g >
<title>[unknown] (872,979,789,250 samples, 74.65%)</title><rect x="308.8" y="261" width="880.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.82" y="271.5" >[unknown]</text>
</g>
<g >
<title>std::__fill_n_a&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="117" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="16.94" y="127.5" ></text>
</g>
<g >
<title>std::fill_n&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="306.1" y="165" width="0.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="309.07" y="175.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::PlatformWorkerThread (111,111,110 samples, 0.01%)</title><rect x="308.4" y="341" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="311.44" y="351.5" ></text>
</g>
<g >
<title>all (1,169,454,533,760 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>perf (121,212,120 samples, 0.01%)</title><rect x="308.6" y="373" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="311.62" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;float*, unsigned long, float&gt; (666,666,660 samples, 0.06%)</title><rect x="13.9" y="181" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="16.94" y="191.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (101,010,100 samples, 0.01%)</title><rect x="307.9" y="181" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="310.90" y="191.5" ></text>
</g>
<g >
<title>[unknown] (222,222,220 samples, 0.02%)</title><rect x="306.5" y="69" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="309.52" y="79.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (222,222,220 samples, 0.02%)</title><rect x="308.1" y="245" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="311.08" y="255.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="1189.9" y="341" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.90" y="351.5" ></text>
</g>
<g >
<title>[unknown] (131,313,130 samples, 0.01%)</title><rect x="11.6" y="165" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.62" y="175.5" ></text>
</g>
<g >
<title>[unknown] (252,525,250 samples, 0.02%)</title><rect x="11.5" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.50" y="319.5" ></text>
</g>
<g >
<title>__expf_fma (2,686,868,660 samples, 0.23%)</title><rect x="49.4" y="213" width="2.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="52.37" y="223.5" ></text>
</g>
<g >
<title>genetic::stack&lt;float, 20&gt;::pop (19,919,191,720 samples, 1.70%)</title><rect x="113.4" y="213" width="20.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="116.37" y="223.5" ></text>
</g>
<g >
<title>v8::Function::Call (151,515,150 samples, 0.01%)</title><rect x="308.1" y="229" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="311.15" y="239.5" ></text>
</g>
<g >
<title>[unknown] (141,414,140 samples, 0.01%)</title><rect x="307.3" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.32" y="367.5" ></text>
</g>
<g >
<title>[unknown] (222,222,220 samples, 0.02%)</title><rect x="306.5" y="85" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="309.52" y="95.5" ></text>
</g>
<g >
<title>uv__async_io.part.3 (242,424,240 samples, 0.02%)</title><rect x="307.6" y="245" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="310.65" y="255.5" ></text>
</g>
<g >
<title>[unknown] (101,010,100 samples, 0.01%)</title><rect x="307.3" y="277" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.34" y="287.5" ></text>
</g>
<g >
<title>[unknown] (289,888,885,990 samples, 24.79%)</title><rect x="897.2" y="213" width="292.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="900.17" y="223.5" >[unknown]</text>
</g>
<g >
<title>vmtoolsd (111,111,110 samples, 0.01%)</title><rect x="1189.9" y="373" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1192.89" y="383.5" ></text>
</g>
<g >
<title>[unknown] (121,212,120 samples, 0.01%)</title><rect x="1189.6" y="69" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.55" y="79.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (141,414,140 samples, 0.01%)</title><rect x="308.2" y="165" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="311.16" y="175.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (737,373,730 samples, 0.06%)</title><rect x="307.6" y="309" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="310.56" y="319.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (141,414,140 samples, 0.01%)</title><rect x="308.2" y="181" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="311.16" y="191.5" ></text>
</g>
</g>
</svg>
